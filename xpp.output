Grammar

    0 $accept: program $end

    1 program: statement
    2        | funclist
    3        | %empty

    4 funclist: funcdef funclist
    5         | funcdef

    6 $@1: %empty

    7 $@2: %empty

    8 funcdef: DEF IDENT $@1 '(' paramlist ')' '{' $@2 statelist '}'

    9 $@3: %empty

   10 paramlist: type IDENT $@3 ',' paramlist
   11          | type IDENT
   12          | %empty

   13 type: INT
   14     | FLOAT
   15     | STRING

   16 statelist: statement statelist
   17          | statement

   18 statement: vardecl ';'
   19          | atribstat ';'
   20          | printstat ';'
   21          | readstat ';'
   22          | RETURN ';'
   23          | ifstat
   24          | forstat

   25 $@4: %empty

   26 statement: '{' $@4 statelist '}'
   27          | BREAK ';'
   28          | ';'

   29 $@5: %empty

   30 vardecl: type IDENT $@5 arraylistdecl

   31 atribstat: lvalue '=' expression
   32          | lvalue '=' allocexpression
   33          | lvalue '=' funccall

   34 funccall: IDENT '(' paramlistcall ')'

   35 paramlistcall: IDENT ',' paramlistcall
   36              | IDENT
   37              | %empty

   38 printstat: PRINT expression

   39 readstat: READ lvalue

   40 $@6: %empty

   41 $@7: %empty

   42 ifstat: IF '(' expression ')' $@6 '{' statelist '}' $@7 elsestat

   43 $@8: %empty

   44 elsestat: ELSE $@8 '{' statelist '}'
   45         | %empty

   46 $@9: %empty

   47 $@10: %empty

   48 $@11: %empty

   49 forstat: FOR '(' atribstat ';' $@9 expression ';' $@10 atribstat ')' $@11 statement

   50 $@12: %empty

   51 allocexpression: NEW type '[' numexpression $@12 ']' arraylistexp

   52 expression: numexpression
   53           | numexpression CMP numexpression

   54 numexpression: numexpression '+' term
   55              | numexpression '-' term
   56              | term

   57 term: term '*' unaryexpr
   58     | term '/' unaryexpr
   59     | term '%' unaryexpr
   60     | unaryexpr

   61 unaryexpr: '+' factor
   62          | '-' factor
   63          | factor

   64 factor: INT_C
   65       | FLOAT_C
   66       | STRING_C
   67       | NUL
   68       | lvalue
   69       | '(' numexpression ')'

   70 lvalue: IDENT arraylistexp

   71 arraylistdecl: arraylistdecl '[' INT_C ']'
   72              | %empty

   73 arraylistexp: arraylistexp '[' numexpression ']'
   74             | %empty


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 59
    '(' (40) 8 34 42 49 69
    ')' (41) 8 34 42 49 69
    '*' (42) 57
    '+' (43) 54 61
    ',' (44) 10 35
    '-' (45) 55 62
    '/' (47) 58
    ';' (59) 18 19 20 21 22 27 28 49
    '=' (61) 31 32 33
    '[' (91) 51 71 73
    ']' (93) 51 71 73
    '{' (123) 8 26 42 44
    '}' (125) 8 26 42 44
    error (256)
    DEF (258) 8
    INT (259) 13
    FLOAT (260) 14
    STRING (261) 15
    BREAK (262) 27
    PRINT (263) 38
    READ (264) 39
    RETURN (265) 22
    IF (266) 42
    ELSE (267) 44
    NEW (268) 51
    NUL (269) 67
    CMP <ival> (270) 53
    IDENT <sval> (271) 8 10 11 30 34 35 36 70
    STRING_C <sval> (272) 66
    INT_C <ival> (273) 64 71
    FLOAT_C <fval> (274) 65
    FOR <forval> (275) 49


Nonterminals, with rules where they appear

    $accept (35)
        on left: 0
    factor <expval> (36)
        on left: 64 65 66 67 68 69
        on right: 61 62 63
    unaryexpr <expval> (37)
        on left: 61 62 63
        on right: 57 58 59 60
    term <expval> (38)
        on left: 57 58 59 60
        on right: 54 55 56 57 58 59
    numexpression <expval> (39)
        on left: 54 55 56
        on right: 51 52 53 54 55 69 73
    expression <expval> (40)
        on left: 52 53
        on right: 31 38 42 49
    lvalue <lvalueval> (41)
        on left: 70
        on right: 31 32 33 39 68
    type <ival> (42)
        on left: 13 14 15
        on right: 10 11 30 51
    arraylistexp <sval> (43)
        on left: 73 74
        on right: 51 70 73
    program (44)
        on left: 1 2 3
        on right: 0
    funclist (45)
        on left: 4 5
        on right: 2 4
    funcdef (46)
        on left: 8
        on right: 4 5
    $@1 (47)
        on left: 6
        on right: 8
    $@2 (48)
        on left: 7
        on right: 8
    paramlist (49)
        on left: 10 11 12
        on right: 8 10
    $@3 (50)
        on left: 9
        on right: 10
    statelist (51)
        on left: 16 17
        on right: 8 16 26 42 44
    statement (52)
        on left: 18 19 20 21 22 23 24 26 27 28
        on right: 1 16 17 49
    $@4 (53)
        on left: 25
        on right: 26
    vardecl (54)
        on left: 30
        on right: 18
    $@5 (55)
        on left: 29
        on right: 30
    atribstat (56)
        on left: 31 32 33
        on right: 19 49
    funccall (57)
        on left: 34
        on right: 33
    paramlistcall (58)
        on left: 35 36 37
        on right: 34 35
    printstat (59)
        on left: 38
        on right: 20
    readstat (60)
        on left: 39
        on right: 21
    ifstat (61)
        on left: 42
        on right: 23
    $@6 (62)
        on left: 40
        on right: 42
    $@7 (63)
        on left: 41
        on right: 42
    elsestat (64)
        on left: 44 45
        on right: 42
    $@8 (65)
        on left: 43
        on right: 44
    forstat (66)
        on left: 49
        on right: 24
    $@9 (67)
        on left: 46
        on right: 49
    $@10 (68)
        on left: 47
        on right: 49
    $@11 (69)
        on left: 48
        on right: 49
    allocexpression (70)
        on left: 51
        on right: 32
    $@12 (71)
        on left: 50
        on right: 51
    arraylistdecl (72)
        on left: 71 72
        on right: 30 71


State 0

    0 $accept: . program $end

    DEF     shift, and go to state 1
    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4
    BREAK   shift, and go to state 5
    PRINT   shift, and go to state 6
    READ    shift, and go to state 7
    RETURN  shift, and go to state 8
    IF      shift, and go to state 9
    IDENT   shift, and go to state 10
    FOR     shift, and go to state 11
    '{'     shift, and go to state 12
    ';'     shift, and go to state 13

    $default  reduce using rule 3 (program)

    lvalue     go to state 14
    type       go to state 15
    program    go to state 16
    funclist   go to state 17
    funcdef    go to state 18
    statement  go to state 19
    vardecl    go to state 20
    atribstat  go to state 21
    printstat  go to state 22
    readstat   go to state 23
    ifstat     go to state 24
    forstat    go to state 25


State 1

    8 funcdef: DEF . IDENT $@1 '(' paramlist ')' '{' $@2 statelist '}'

    IDENT  shift, and go to state 26


State 2

   13 type: INT .

    $default  reduce using rule 13 (type)


State 3

   14 type: FLOAT .

    $default  reduce using rule 14 (type)


State 4

   15 type: STRING .

    $default  reduce using rule 15 (type)


State 5

   27 statement: BREAK . ';'

    ';'  shift, and go to state 27


State 6

   38 printstat: PRINT . expression

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor         go to state 35
    unaryexpr      go to state 36
    term           go to state 37
    numexpression  go to state 38
    expression     go to state 39
    lvalue         go to state 40


State 7

   39 readstat: READ . lvalue

    IDENT  shift, and go to state 10

    lvalue  go to state 41


State 8

   22 statement: RETURN . ';'

    ';'  shift, and go to state 42


State 9

   42 ifstat: IF . '(' expression ')' $@6 '{' statelist '}' $@7 elsestat

    '('  shift, and go to state 43


State 10

   70 lvalue: IDENT . arraylistexp

    $default  reduce using rule 74 (arraylistexp)

    arraylistexp  go to state 44


State 11

   49 forstat: FOR . '(' atribstat ';' $@9 expression ';' $@10 atribstat ')' $@11 statement

    '('  shift, and go to state 45


State 12

   26 statement: '{' . $@4 statelist '}'

    $default  reduce using rule 25 ($@4)

    $@4  go to state 46


State 13

   28 statement: ';' .

    $default  reduce using rule 28 (statement)


State 14

   31 atribstat: lvalue . '=' expression
   32          | lvalue . '=' allocexpression
   33          | lvalue . '=' funccall

    '='  shift, and go to state 47


State 15

   30 vardecl: type . IDENT $@5 arraylistdecl

    IDENT  shift, and go to state 48


State 16

    0 $accept: program . $end

    $end  shift, and go to state 49


State 17

    2 program: funclist .

    $default  reduce using rule 2 (program)


State 18

    4 funclist: funcdef . funclist
    5         | funcdef .

    DEF  shift, and go to state 1

    $default  reduce using rule 5 (funclist)

    funclist  go to state 50
    funcdef   go to state 18


State 19

    1 program: statement .

    $default  reduce using rule 1 (program)


State 20

   18 statement: vardecl . ';'

    ';'  shift, and go to state 51


State 21

   19 statement: atribstat . ';'

    ';'  shift, and go to state 52


State 22

   20 statement: printstat . ';'

    ';'  shift, and go to state 53


State 23

   21 statement: readstat . ';'

    ';'  shift, and go to state 54


State 24

   23 statement: ifstat .

    $default  reduce using rule 23 (statement)


State 25

   24 statement: forstat .

    $default  reduce using rule 24 (statement)


State 26

    8 funcdef: DEF IDENT . $@1 '(' paramlist ')' '{' $@2 statelist '}'

    $default  reduce using rule 6 ($@1)

    $@1  go to state 55


State 27

   27 statement: BREAK ';' .

    $default  reduce using rule 27 (statement)


State 28

   67 factor: NUL .

    $default  reduce using rule 67 (factor)


State 29

   66 factor: STRING_C .

    $default  reduce using rule 66 (factor)


State 30

   64 factor: INT_C .

    $default  reduce using rule 64 (factor)


State 31

   65 factor: FLOAT_C .

    $default  reduce using rule 65 (factor)


State 32

   69 factor: '(' . numexpression ')'

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor         go to state 35
    unaryexpr      go to state 36
    term           go to state 37
    numexpression  go to state 56
    lvalue         go to state 40


State 33

   61 unaryexpr: '+' . factor

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32

    factor  go to state 57
    lvalue  go to state 40


State 34

   62 unaryexpr: '-' . factor

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32

    factor  go to state 58
    lvalue  go to state 40


State 35

   63 unaryexpr: factor .

    $default  reduce using rule 63 (unaryexpr)


State 36

   60 term: unaryexpr .

    $default  reduce using rule 60 (term)


State 37

   56 numexpression: term .
   57 term: term . '*' unaryexpr
   58     | term . '/' unaryexpr
   59     | term . '%' unaryexpr

    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 56 (numexpression)


State 38

   52 expression: numexpression .
   53           | numexpression . CMP numexpression
   54 numexpression: numexpression . '+' term
   55              | numexpression . '-' term

    CMP  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 52 (expression)


State 39

   38 printstat: PRINT expression .

    $default  reduce using rule 38 (printstat)


State 40

   68 factor: lvalue .

    $default  reduce using rule 68 (factor)


State 41

   39 readstat: READ lvalue .

    $default  reduce using rule 39 (readstat)


State 42

   22 statement: RETURN ';' .

    $default  reduce using rule 22 (statement)


State 43

   42 ifstat: IF '(' . expression ')' $@6 '{' statelist '}' $@7 elsestat

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor         go to state 35
    unaryexpr      go to state 36
    term           go to state 37
    numexpression  go to state 38
    expression     go to state 65
    lvalue         go to state 40


State 44

   70 lvalue: IDENT arraylistexp .
   73 arraylistexp: arraylistexp . '[' numexpression ']'

    '['  shift, and go to state 66

    $default  reduce using rule 70 (lvalue)


State 45

   49 forstat: FOR '(' . atribstat ';' $@9 expression ';' $@10 atribstat ')' $@11 statement

    IDENT  shift, and go to state 10

    lvalue     go to state 14
    atribstat  go to state 67


State 46

   26 statement: '{' $@4 . statelist '}'

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4
    BREAK   shift, and go to state 5
    PRINT   shift, and go to state 6
    READ    shift, and go to state 7
    RETURN  shift, and go to state 8
    IF      shift, and go to state 9
    IDENT   shift, and go to state 10
    FOR     shift, and go to state 11
    '{'     shift, and go to state 12
    ';'     shift, and go to state 13

    lvalue     go to state 14
    type       go to state 15
    statelist  go to state 68
    statement  go to state 69
    vardecl    go to state 20
    atribstat  go to state 21
    printstat  go to state 22
    readstat   go to state 23
    ifstat     go to state 24
    forstat    go to state 25


State 47

   31 atribstat: lvalue '=' . expression
   32          | lvalue '=' . allocexpression
   33          | lvalue '=' . funccall

    NEW       shift, and go to state 70
    NUL       shift, and go to state 28
    IDENT     shift, and go to state 71
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor           go to state 35
    unaryexpr        go to state 36
    term             go to state 37
    numexpression    go to state 38
    expression       go to state 72
    lvalue           go to state 40
    funccall         go to state 73
    allocexpression  go to state 74


State 48

   30 vardecl: type IDENT . $@5 arraylistdecl

    $default  reduce using rule 29 ($@5)

    $@5  go to state 75


State 49

    0 $accept: program $end .

    $default  accept


State 50

    4 funclist: funcdef funclist .

    $default  reduce using rule 4 (funclist)


State 51

   18 statement: vardecl ';' .

    $default  reduce using rule 18 (statement)


State 52

   19 statement: atribstat ';' .

    $default  reduce using rule 19 (statement)


State 53

   20 statement: printstat ';' .

    $default  reduce using rule 20 (statement)


State 54

   21 statement: readstat ';' .

    $default  reduce using rule 21 (statement)


State 55

    8 funcdef: DEF IDENT $@1 . '(' paramlist ')' '{' $@2 statelist '}'

    '('  shift, and go to state 76


State 56

   54 numexpression: numexpression . '+' term
   55              | numexpression . '-' term
   69 factor: '(' numexpression . ')'

    ')'  shift, and go to state 77
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64


State 57

   61 unaryexpr: '+' factor .

    $default  reduce using rule 61 (unaryexpr)


State 58

   62 unaryexpr: '-' factor .

    $default  reduce using rule 62 (unaryexpr)


State 59

   57 term: term '*' . unaryexpr

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor     go to state 35
    unaryexpr  go to state 78
    lvalue     go to state 40


State 60

   58 term: term '/' . unaryexpr

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor     go to state 35
    unaryexpr  go to state 79
    lvalue     go to state 40


State 61

   59 term: term '%' . unaryexpr

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor     go to state 35
    unaryexpr  go to state 80
    lvalue     go to state 40


State 62

   53 expression: numexpression CMP . numexpression

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor         go to state 35
    unaryexpr      go to state 36
    term           go to state 37
    numexpression  go to state 81
    lvalue         go to state 40


State 63

   54 numexpression: numexpression '+' . term

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor     go to state 35
    unaryexpr  go to state 36
    term       go to state 82
    lvalue     go to state 40


State 64

   55 numexpression: numexpression '-' . term

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor     go to state 35
    unaryexpr  go to state 36
    term       go to state 83
    lvalue     go to state 40


State 65

   42 ifstat: IF '(' expression . ')' $@6 '{' statelist '}' $@7 elsestat

    ')'  shift, and go to state 84


State 66

   73 arraylistexp: arraylistexp '[' . numexpression ']'

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor         go to state 35
    unaryexpr      go to state 36
    term           go to state 37
    numexpression  go to state 85
    lvalue         go to state 40


State 67

   49 forstat: FOR '(' atribstat . ';' $@9 expression ';' $@10 atribstat ')' $@11 statement

    ';'  shift, and go to state 86


State 68

   26 statement: '{' $@4 statelist . '}'

    '}'  shift, and go to state 87


State 69

   16 statelist: statement . statelist
   17          | statement .

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4
    BREAK   shift, and go to state 5
    PRINT   shift, and go to state 6
    READ    shift, and go to state 7
    RETURN  shift, and go to state 8
    IF      shift, and go to state 9
    IDENT   shift, and go to state 10
    FOR     shift, and go to state 11
    '{'     shift, and go to state 12
    ';'     shift, and go to state 13

    $default  reduce using rule 17 (statelist)

    lvalue     go to state 14
    type       go to state 15
    statelist  go to state 88
    statement  go to state 69
    vardecl    go to state 20
    atribstat  go to state 21
    printstat  go to state 22
    readstat   go to state 23
    ifstat     go to state 24
    forstat    go to state 25


State 70

   51 allocexpression: NEW . type '[' numexpression $@12 ']' arraylistexp

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4

    type  go to state 89


State 71

   34 funccall: IDENT . '(' paramlistcall ')'
   70 lvalue: IDENT . arraylistexp

    '('  shift, and go to state 90

    $default  reduce using rule 74 (arraylistexp)

    arraylistexp  go to state 44


State 72

   31 atribstat: lvalue '=' expression .

    $default  reduce using rule 31 (atribstat)


State 73

   33 atribstat: lvalue '=' funccall .

    $default  reduce using rule 33 (atribstat)


State 74

   32 atribstat: lvalue '=' allocexpression .

    $default  reduce using rule 32 (atribstat)


State 75

   30 vardecl: type IDENT $@5 . arraylistdecl

    $default  reduce using rule 72 (arraylistdecl)

    arraylistdecl  go to state 91


State 76

    8 funcdef: DEF IDENT $@1 '(' . paramlist ')' '{' $@2 statelist '}'

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4

    $default  reduce using rule 12 (paramlist)

    type       go to state 92
    paramlist  go to state 93


State 77

   69 factor: '(' numexpression ')' .

    $default  reduce using rule 69 (factor)


State 78

   57 term: term '*' unaryexpr .

    $default  reduce using rule 57 (term)


State 79

   58 term: term '/' unaryexpr .

    $default  reduce using rule 58 (term)


State 80

   59 term: term '%' unaryexpr .

    $default  reduce using rule 59 (term)


State 81

   53 expression: numexpression CMP numexpression .
   54 numexpression: numexpression . '+' term
   55              | numexpression . '-' term

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 53 (expression)


State 82

   54 numexpression: numexpression '+' term .
   57 term: term . '*' unaryexpr
   58     | term . '/' unaryexpr
   59     | term . '%' unaryexpr

    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 54 (numexpression)


State 83

   55 numexpression: numexpression '-' term .
   57 term: term . '*' unaryexpr
   58     | term . '/' unaryexpr
   59     | term . '%' unaryexpr

    '*'  shift, and go to state 59
    '/'  shift, and go to state 60
    '%'  shift, and go to state 61

    $default  reduce using rule 55 (numexpression)


State 84

   42 ifstat: IF '(' expression ')' . $@6 '{' statelist '}' $@7 elsestat

    $default  reduce using rule 40 ($@6)

    $@6  go to state 94


State 85

   54 numexpression: numexpression . '+' term
   55              | numexpression . '-' term
   73 arraylistexp: arraylistexp '[' numexpression . ']'

    ']'  shift, and go to state 95
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64


State 86

   49 forstat: FOR '(' atribstat ';' . $@9 expression ';' $@10 atribstat ')' $@11 statement

    $default  reduce using rule 46 ($@9)

    $@9  go to state 96


State 87

   26 statement: '{' $@4 statelist '}' .

    $default  reduce using rule 26 (statement)


State 88

   16 statelist: statement statelist .

    $default  reduce using rule 16 (statelist)


State 89

   51 allocexpression: NEW type . '[' numexpression $@12 ']' arraylistexp

    '['  shift, and go to state 97


State 90

   34 funccall: IDENT '(' . paramlistcall ')'

    IDENT  shift, and go to state 98

    $default  reduce using rule 37 (paramlistcall)

    paramlistcall  go to state 99


State 91

   30 vardecl: type IDENT $@5 arraylistdecl .
   71 arraylistdecl: arraylistdecl . '[' INT_C ']'

    '['  shift, and go to state 100

    $default  reduce using rule 30 (vardecl)


State 92

   10 paramlist: type . IDENT $@3 ',' paramlist
   11          | type . IDENT

    IDENT  shift, and go to state 101


State 93

    8 funcdef: DEF IDENT $@1 '(' paramlist . ')' '{' $@2 statelist '}'

    ')'  shift, and go to state 102


State 94

   42 ifstat: IF '(' expression ')' $@6 . '{' statelist '}' $@7 elsestat

    '{'  shift, and go to state 103


State 95

   73 arraylistexp: arraylistexp '[' numexpression ']' .

    $default  reduce using rule 73 (arraylistexp)


State 96

   49 forstat: FOR '(' atribstat ';' $@9 . expression ';' $@10 atribstat ')' $@11 statement

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor         go to state 35
    unaryexpr      go to state 36
    term           go to state 37
    numexpression  go to state 38
    expression     go to state 104
    lvalue         go to state 40


State 97

   51 allocexpression: NEW type '[' . numexpression $@12 ']' arraylistexp

    NUL       shift, and go to state 28
    IDENT     shift, and go to state 10
    STRING_C  shift, and go to state 29
    INT_C     shift, and go to state 30
    FLOAT_C   shift, and go to state 31
    '('       shift, and go to state 32
    '+'       shift, and go to state 33
    '-'       shift, and go to state 34

    factor         go to state 35
    unaryexpr      go to state 36
    term           go to state 37
    numexpression  go to state 105
    lvalue         go to state 40


State 98

   35 paramlistcall: IDENT . ',' paramlistcall
   36              | IDENT .

    ','  shift, and go to state 106

    $default  reduce using rule 36 (paramlistcall)


State 99

   34 funccall: IDENT '(' paramlistcall . ')'

    ')'  shift, and go to state 107


State 100

   71 arraylistdecl: arraylistdecl '[' . INT_C ']'

    INT_C  shift, and go to state 108


State 101

   10 paramlist: type IDENT . $@3 ',' paramlist
   11          | type IDENT .

    ')'       reduce using rule 11 (paramlist)
    $default  reduce using rule 9 ($@3)

    $@3  go to state 109


State 102

    8 funcdef: DEF IDENT $@1 '(' paramlist ')' . '{' $@2 statelist '}'

    '{'  shift, and go to state 110


State 103

   42 ifstat: IF '(' expression ')' $@6 '{' . statelist '}' $@7 elsestat

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4
    BREAK   shift, and go to state 5
    PRINT   shift, and go to state 6
    READ    shift, and go to state 7
    RETURN  shift, and go to state 8
    IF      shift, and go to state 9
    IDENT   shift, and go to state 10
    FOR     shift, and go to state 11
    '{'     shift, and go to state 12
    ';'     shift, and go to state 13

    lvalue     go to state 14
    type       go to state 15
    statelist  go to state 111
    statement  go to state 69
    vardecl    go to state 20
    atribstat  go to state 21
    printstat  go to state 22
    readstat   go to state 23
    ifstat     go to state 24
    forstat    go to state 25


State 104

   49 forstat: FOR '(' atribstat ';' $@9 expression . ';' $@10 atribstat ')' $@11 statement

    ';'  shift, and go to state 112


State 105

   51 allocexpression: NEW type '[' numexpression . $@12 ']' arraylistexp
   54 numexpression: numexpression . '+' term
   55              | numexpression . '-' term

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 50 ($@12)

    $@12  go to state 113


State 106

   35 paramlistcall: IDENT ',' . paramlistcall

    IDENT  shift, and go to state 98

    $default  reduce using rule 37 (paramlistcall)

    paramlistcall  go to state 114


State 107

   34 funccall: IDENT '(' paramlistcall ')' .

    $default  reduce using rule 34 (funccall)


State 108

   71 arraylistdecl: arraylistdecl '[' INT_C . ']'

    ']'  shift, and go to state 115


State 109

   10 paramlist: type IDENT $@3 . ',' paramlist

    ','  shift, and go to state 116


State 110

    8 funcdef: DEF IDENT $@1 '(' paramlist ')' '{' . $@2 statelist '}'

    $default  reduce using rule 7 ($@2)

    $@2  go to state 117


State 111

   42 ifstat: IF '(' expression ')' $@6 '{' statelist . '}' $@7 elsestat

    '}'  shift, and go to state 118


State 112

   49 forstat: FOR '(' atribstat ';' $@9 expression ';' . $@10 atribstat ')' $@11 statement

    $default  reduce using rule 47 ($@10)

    $@10  go to state 119


State 113

   51 allocexpression: NEW type '[' numexpression $@12 . ']' arraylistexp

    ']'  shift, and go to state 120


State 114

   35 paramlistcall: IDENT ',' paramlistcall .

    $default  reduce using rule 35 (paramlistcall)


State 115

   71 arraylistdecl: arraylistdecl '[' INT_C ']' .

    $default  reduce using rule 71 (arraylistdecl)


State 116

   10 paramlist: type IDENT $@3 ',' . paramlist

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4

    $default  reduce using rule 12 (paramlist)

    type       go to state 92
    paramlist  go to state 121


State 117

    8 funcdef: DEF IDENT $@1 '(' paramlist ')' '{' $@2 . statelist '}'

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4
    BREAK   shift, and go to state 5
    PRINT   shift, and go to state 6
    READ    shift, and go to state 7
    RETURN  shift, and go to state 8
    IF      shift, and go to state 9
    IDENT   shift, and go to state 10
    FOR     shift, and go to state 11
    '{'     shift, and go to state 12
    ';'     shift, and go to state 13

    lvalue     go to state 14
    type       go to state 15
    statelist  go to state 122
    statement  go to state 69
    vardecl    go to state 20
    atribstat  go to state 21
    printstat  go to state 22
    readstat   go to state 23
    ifstat     go to state 24
    forstat    go to state 25


State 118

   42 ifstat: IF '(' expression ')' $@6 '{' statelist '}' . $@7 elsestat

    $default  reduce using rule 41 ($@7)

    $@7  go to state 123


State 119

   49 forstat: FOR '(' atribstat ';' $@9 expression ';' $@10 . atribstat ')' $@11 statement

    IDENT  shift, and go to state 10

    lvalue     go to state 14
    atribstat  go to state 124


State 120

   51 allocexpression: NEW type '[' numexpression $@12 ']' . arraylistexp

    $default  reduce using rule 74 (arraylistexp)

    arraylistexp  go to state 125


State 121

   10 paramlist: type IDENT $@3 ',' paramlist .

    $default  reduce using rule 10 (paramlist)


State 122

    8 funcdef: DEF IDENT $@1 '(' paramlist ')' '{' $@2 statelist . '}'

    '}'  shift, and go to state 126


State 123

   42 ifstat: IF '(' expression ')' $@6 '{' statelist '}' $@7 . elsestat

    ELSE  shift, and go to state 127

    $default  reduce using rule 45 (elsestat)

    elsestat  go to state 128


State 124

   49 forstat: FOR '(' atribstat ';' $@9 expression ';' $@10 atribstat . ')' $@11 statement

    ')'  shift, and go to state 129


State 125

   51 allocexpression: NEW type '[' numexpression $@12 ']' arraylistexp .
   73 arraylistexp: arraylistexp . '[' numexpression ']'

    '['  shift, and go to state 66

    $default  reduce using rule 51 (allocexpression)


State 126

    8 funcdef: DEF IDENT $@1 '(' paramlist ')' '{' $@2 statelist '}' .

    $default  reduce using rule 8 (funcdef)


State 127

   44 elsestat: ELSE . $@8 '{' statelist '}'

    $default  reduce using rule 43 ($@8)

    $@8  go to state 130


State 128

   42 ifstat: IF '(' expression ')' $@6 '{' statelist '}' $@7 elsestat .

    $default  reduce using rule 42 (ifstat)


State 129

   49 forstat: FOR '(' atribstat ';' $@9 expression ';' $@10 atribstat ')' . $@11 statement

    $default  reduce using rule 48 ($@11)

    $@11  go to state 131


State 130

   44 elsestat: ELSE $@8 . '{' statelist '}'

    '{'  shift, and go to state 132


State 131

   49 forstat: FOR '(' atribstat ';' $@9 expression ';' $@10 atribstat ')' $@11 . statement

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4
    BREAK   shift, and go to state 5
    PRINT   shift, and go to state 6
    READ    shift, and go to state 7
    RETURN  shift, and go to state 8
    IF      shift, and go to state 9
    IDENT   shift, and go to state 10
    FOR     shift, and go to state 11
    '{'     shift, and go to state 12
    ';'     shift, and go to state 13

    lvalue     go to state 14
    type       go to state 15
    statement  go to state 133
    vardecl    go to state 20
    atribstat  go to state 21
    printstat  go to state 22
    readstat   go to state 23
    ifstat     go to state 24
    forstat    go to state 25


State 132

   44 elsestat: ELSE $@8 '{' . statelist '}'

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    STRING  shift, and go to state 4
    BREAK   shift, and go to state 5
    PRINT   shift, and go to state 6
    READ    shift, and go to state 7
    RETURN  shift, and go to state 8
    IF      shift, and go to state 9
    IDENT   shift, and go to state 10
    FOR     shift, and go to state 11
    '{'     shift, and go to state 12
    ';'     shift, and go to state 13

    lvalue     go to state 14
    type       go to state 15
    statelist  go to state 134
    statement  go to state 69
    vardecl    go to state 20
    atribstat  go to state 21
    printstat  go to state 22
    readstat   go to state 23
    ifstat     go to state 24
    forstat    go to state 25


State 133

   49 forstat: FOR '(' atribstat ';' $@9 expression ';' $@10 atribstat ')' $@11 statement .

    $default  reduce using rule 49 (forstat)


State 134

   44 elsestat: ELSE $@8 '{' statelist . '}'

    '}'  shift, and go to state 135


State 135

   44 elsestat: ELSE $@8 '{' statelist '}' .

    $default  reduce using rule 44 (elsestat)
